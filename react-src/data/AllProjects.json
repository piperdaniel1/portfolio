[
    {
        "name": "Wordle Social Network",
        "tagline": "A social network for Wordle players",
        "description": "A social network for Wordle players. Users can create an account, add friends, and track their Wordle stats. Users can also view a customized feed with their friend's guesses, as well as see how well each friend is doing overall. There is also a comprehensive guess analysis page where you can see how good each of your guesses was compared to other possible guesses.",
        "technologies": ["Javascript", "Firebase", "Firebase Hosting", "Firebase Realtime DB", "Firebase Firestore", "Stripe", "Go", "New York Times API"],
        "image-link": "https://static01.nyt.com/images/2022/03/02/crosswords/alpha-wordle-icon-new/alpha-wordle-icon-new-square320-v3.png?format=pjpg&quality=100&auto=webp&disable=upscale",
        "project-type": "personal",
        "src-link": "https://github.com/piperdaniel1/play-wordle-bot",
    },
    {
        "title": "Harlough - The AI Music Discord Bot",
        "tagline": "A Discord bot that plays music using AI",
        "description": "Harlough is a Discord Bot that can play music from YouTube in reponse to natural language prompts. It uses the OpenAI Chat Completions API to generate a response to the prompt, and then uses the YouTube API to find a song that matches the response. It then plays the song in the voice channel that the user is in.",
        "technologies": ["Python", "OpenAI API", "YouTube API", "Discord API", "Go HTTP Server", "JSON", "Microsoft Azure", "Requests (Python)", "Beautiful Soup (Python)"],
        "image-link": "https://assets-global.website-files.com/6257adef93867e50d84d30e2/636e0a6a49cf127bf92de1e2_icon_clyde_blurple_RGB.png",
        "project-type": "personal",
        "src-link": "https://github.com/piperdaniel1/harlough"
    },
    {
        "title": "Ferric Fury 1.0 - The Python Version of my Chess AI",
        "tagline": "A chess AI written using the chess-python library",
        "description": "The goal of this first iteration was simply to make a good Chess AI. However, once I got up to speed I realized that this pure-python approach had some issues that were going to plague me in the end. For one, I could not efficiently search more than four moves ahead. I implemented a lot of features to help remedy this, including alpha beta pruning and a transposition table but I was still hard limited by my rate of boards analyzed per second.",
        "technologies": ["Rust", "Go HTTP Server", "JavaScript", "Lichess API", "Reqwest (Rust)", "JSON"],
        "image-link": "https://images.prismic.io/lichess/5cfd2630-2a8f-4fa9-8f78-04c2d9f0e5fe_lichess-box-1024.png?auto=compress,format",
        "project-type": "personal",
        "src-link": "https://github.com/piperdaniel1/chess-ai"
    },
    {
        "title": "Ferric Fury 2.0 - The C++ Version of my Chess AI",
        "tagline": "A chess AI written entirely from scratch in C++",
        "description": "The goal of 2.0 was to make a faster AI using the speed of a compiled language. However, this version of Ferric Fury ended up having some critical issues. It was not very optimized due to there being a significant amount of memory issues that caused me to have to go for a copy-board-based move push approach. This approach meant that it was only a bit faster than the Python version. Part of this was because I had made move generation from scratch this time, instead of using a similar library to python-chess. I'm sure there were a lot of smart optimizations that went into python-chess that allowed it to compete with my C++ version for speed despite being in Python.",
        "technologies": ["Rust", "Go HTTP Server", "JavaScript", "Lichess API", "Reqwest (Rust)", "JSON"],
        "image-link": "https://images.prismic.io/lichess/5cfd2630-2a8f-4fa9-8f78-04c2d9f0e5fe_lichess-box-1024.png?auto=compress,format",
        "project-type": "personal",
        "src-link": "https://github.com/piperdaniel1/chess-ai"
    },
    {
        "title": "Ferric Fury 3.0 - The Rust Version of my Chess AI",
        "tagline": "A versatile chess AI written entirely from scratch in Rust",
        "description": "Ferric Fury 3.0 is a clever chess bot, meticulously crafted with the powerful Rust programming language. It has accomplished much of what I hoped for from previous versions. Boasting a robust 1400 ELO rating, it thrives on the Lichess platform, fearlessly challenging opponents to thrilling matches. Ferric Fury's strategic prowess is based on it's optimized Minimax algorithm, making it a formidable adversary across the board. As its name suggests, the AI harnesses its ironclad logic to unleash a torrent of tactical moves and fierce attacks, transforming each game into a captivating dance of Ferric Fury. The bot's arsenal includes lots of common Chess AI optimization including an opening book and a transposition table. Currently the bot is available exclusively on this site to play against.",
        "technologies": ["Rust", "Go HTTP Server", "JavaScript", "Lichess API", "Reqwest (Rust)", "JSON"],
        "image-link": "https://images.prismic.io/lichess/5cfd2630-2a8f-4fa9-8f78-04c2d9f0e5fe_lichess-box-1024.png?auto=compress,format",
        "project-type": "personal",
        "src-link": "https://github.com/piperdaniel1/chess-ai"
    },
    {
        "title": "My Portfolio Website (this site)",
        "tagline": "A website to showcase my projects and skills",
        "description": "This website was built using the React JavaScript library. It is a single-page application that uses React Router to handle navigation. The site is hosted on Firebase Hosting and is served using a custom domain name. The site is optimized for all screen sizes, right down to small phones like the iPhone SE. It also has some elements (playing the Chess AI for example) that rely on a Go backend server, which is hosted on Microsoft Azure.",
        "technologies": ["React", "JavaScript", "HTML", "CSS", "Firebase Hosting", "Go HTTP Server", "Microsoft Azure"],
        "image-link": "https://cdn4.iconfinder.com/data/icons/logos-3/600/React.js_logo-512.png",
        "project-type": "personal",
        "src-link": "https://github.com/piperdaniel1/portfolio"
    },
    {
        "title": "W2W-Parser - College of Business Schedule Generator",
        "tagline": "Automatically create color-coded excel schedules from When To Work schedules.",
        "description": "This project allowed the College of Business IT department to seamlessly transition their student schedules from a manual Excel-based solution to a When To Work based approach. The one downside of When To Work is it did not generate an easily readable color-coded schedule of the shifts for that week (like everyone was used to from the manual Excel based approach). This project uses Python to automatically query the backend API of When To Work and pull the schedule information. This schedule is then used to programmatically generate a color-coded Excel file with each shift represented. The main challenge for the project was interfacing with When To Work, as they do not have an officially supported API. Therefore, I had to reverse engineer the backend of the site and pretend to be the web client to get the schedule information.",
        "technologies": ["Python", "When To Work API", "Excel", "Excel (Python)"],
        "image-link": "https://whentowork.com/images_sales/w2w_logo_circle.png",
        "project-type": "personal",
        "src-link": "https://github.com/piperdaniel1/w2w-parser"
    },
    {
        "title": "Trading Bot - Stock and Crypto Analysis",
        "tagline": "Analyze stock and crypto market data using trading signals and indicators",
        "description": "This trading-bot is designed to collect and analyze price and trade data from the stock and crypto markets. It includes a set of datatypes to store price and trade data, a collection of indicators to analyze price data, and various strategies that utilize trade indicators to create Action_Histories. The trading-bot is built using Python and can be used for backtesting and generating trade signals. It supports multiple indicators such as ATR, EMA, and TR_EMA, and can be extended to incorporate more strategies and indicators.",
        "technologies": ["Python", "Pandas", "Datetime", "Matplotlib"],
        "image-link": "https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/768px-Python-logo-notext.svg.png",
        "project-type": "personal",
        "src-link": "https://github.com/piperdaniel1/trading-bot"
    },
    {
        "title": "Liquidity - Sensor-Driven In-Home Climate Control",
        "tagline": "Optimizing window usage for efficient climate control in homes",
        "description": "This Oregon State University Computer Science Capstone Project aims to empower homeowners to make optimal use of their windows to cool and heat their homes, using sensors placed throughout their home. The project is free, open-source, highly configurable, and not locked into any ecosystem. It requires sensor modules for temperature and humidity data and can be used with a cloud-hosted or self-hosted web server. The project is designed to be accessible and adaptable to users' needs while helping to reduce utility bills. My contribution was mainly to the frontend React code for the site which involved a lot of graphing and data analysis in Javascript, as well as the creation of React components to display the analysis results.",
        "technologies": ["Arduino Nano RP2040 Connect", "DHT11 Sensor", "Python", "Flask", "HTML", "CSS", "JavaScript", "Azure"],
        "image-link": "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e0/Arduino_shiny_logo.svg/1200px-Arduino_shiny_logo.svg.png",
        "project-type": "school",
        "src-link": "https://github.com/sensor-climate-control"
    },
    {
        "title": "Scumblr - CS 290 and CS 340 Final Projects",
        "tagline": "Final projects for CS 290 and CS 340 at Oregon State University",
        "description": "These projects were both social networking sites. The CS 290 (Web Development) site used a crude JSON database to store user generated content and the CS 340 (Databases) site moved to a MariaDB (SQL) database. During CS 340 the frontend for the site was also transitioned to use Vue, a frontend javascript framework that is a popular alternative to React. These were both group final projects with the same group between each one. However, each time I took the lead on the project, generating a large amount of code in all aspects of the project.",
        "technologies": ["HTML", "CSS", "JavaScript", "Vue", "MariaDB", "SQL", "JSON"],
        "image-link": "https://upload.wikimedia.org/wikipedia/commons/thumb/9/95/Vue.js_Logo_2.svg/1200px-Vue.js_Logo_2.svg.png",
        "project-type": "school",
        "src-link": "https://github.com/EthanSWickman/fat-hiker-old"
    },
    {
        "title": "Smallsh - CS 344 Final Project",
        "tagline": "A small bash-like shell program written in C",
        "description": "This project is a simplified bash-like shell program implemented in C. The program is designed to parse and execute user input commands, such as 'cd', 'status', and 'exit', as well as launching other foreground and background processes. It demonstrates a solid understanding of process management, signal handling, and input/output redirection in a Unix-like environment. The project was developed as a final project for the CS 344 (Operating Systems) course at Oregon State University.",
        "technologies": ["C", "Unix", "Shell Programming", "Process Management", "Signal Handling", "I/O Redirection"],
        "image-link": "https://banner2.cleanpng.com/20180705/txh/kisspng-bash-shell-script-command-line-interface-z-shell-5b3df571eaf1a4.5375084915307871859623.jpg",
        "project-type": "school",
        "src-link": null
    },
    {
        "title": "Correctify - CS 492 Final Project",
        "tagline": "An AI-powered tool for correcting writing errors on Android devices",
        "description": "Correctify is an AI-powered tool designed to fix writing errors, such as spelling and grammar, in any given text. Users can simply paste their text into the app, and Correctify will format and correct any detected errors. The application is built for Android and leverages OpenAI's API to perform text corrections. This project was developed by a team of four students as a final project for the CS 492 (Mobile Software Development) course at Oregon State University.",
        "technologies": ["Android", "OpenAI API", "Kotlin", "XML"],
        "image-link": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/db/Android_robot_2014.svg/1024px-Android_robot_2014.svg.png",
        "project-type": "school",
        "src-link": "https://github.com/osu-cs492-w23/final-project-team16",
    }
]
